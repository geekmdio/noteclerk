package main

import (
	"testing"
	"context"
	"github.com/geekmdio/ehrprotorepo/goproto"
	"github.com/google/uuid"
	"github.com/golang/protobuf/ptypes/timestamp"
)

func TestNoteClerkServer_NewNote(t *testing.T) {
	s := &NoteClerkServer{}
	c := context.Background()
	cnr := &ehrpb.CreateNoteRequest{
		Note: &ehrpb.Note{
			Id: 0, // Generated by NewNote (via primary key auto-increment)
			DateCreated: &timestamp.Timestamp{}, // Generated by NewNote
			NoteGuid:             "", // Generated by NewNote
			VisitGuid:            uuid.New().String(),
			AuthorGuid:           uuid.New().String(),
			PatientGuid:          uuid.New().String(),
			Type:                 ehrpb.NoteType_CONTINUED_CARE_DOCUMENTATION,
		},
	}
	res, err := s.NewNote(c, cnr)

	if err != nil {
		t.Fatalf("%v", err)
	}

	if res.Status.HttpCode != ehrpb.StatusCodes_OK {
		t.Fatalf("Status could should be OK")
	}

	if res.Note.GetDateCreated().Seconds == 0 {
		t.Fatalf("The timestamp was not created.")
	}

	_, noteGuidParseErr := uuid.Parse(res.Note.GetNoteGuid())
	if noteGuidParseErr != nil {
		t.Fatalf("The note did not have a new GUID created for it, and is likely invalid.")
	}

	_, visitGuidParseErr := uuid.Parse(res.Note.GetVisitGuid())
	if visitGuidParseErr != nil {
		t.Fatalf("The note did not have a new GUID created for it, and is likely invalid.")
	}

	_, authorGuidParseErr := uuid.Parse(res.Note.GetAuthorGuid())
	if authorGuidParseErr != nil {
		t.Fatalf("The note did not have a new GUID created for it, and is likely invalid.")
	}

	_, patientGuidParseErr := uuid.Parse(res.Note.GetPatientGuid())
	if patientGuidParseErr != nil {
		t.Fatalf("The note did not have a new GUID created for it, and is likely invalid.")
	}

	if res.Note.Type != cnr.Note.Type {
		t.Fatalf("Note type was not transferred to resulting note.")
	}
}

func TestNoteClerkServer_NewNote_WithFragmentsRetainsFragments(t *testing.T) {
	s := &NoteClerkServer{}
	c := context.Background()
	cnr := &ehrpb.CreateNoteRequest{}
	expectedFragId := int32(44)
	cnr.Note.Fragments = append(cnr.Note.Fragments, &ehrpb.NoteFragment{
		Id: expectedFragId,
	})
	res, err := s.NewNote(c, cnr)
	if err != nil {
		t.Fatalf("Error creating a new note")
	}

	if len(res.Note.Fragments)  <= 0 {
		t.Fatalf("Note fragments were note appended.")
	}

	firstFrag := res.Note.Fragments[0]
	if firstFrag.Id != expectedFragId {
		t.Fatalf("Was expecting an id of %v and got %v", expectedFragId, firstFrag.Id)
	}
}

func TestNoteClerkServer_NewNote_WithTagsRetainsTags(t *testing.T) {
	s := &NoteClerkServer{}
	c := context.Background()
	expectedTag := "mytag"
	cnr := &ehrpb.CreateNoteRequest{}
	cnr.Note.Tags = append(cnr.Note.Tags, expectedTag)

	res, err := s.NewNote(c, cnr)
	if err != nil {
		t.Fatalf("Error creating a new note")
	}

	if len(res.Note.Tags) <= 0 {
		t.Fatalf("Should be one tag present")
	}

	firstTag := res.Note.Tags[0]
	if firstTag != expectedTag {
		t.Fatalf("Expected tag %v, but got %v", expectedTag, firstTag)
	}
}

func TestNoteClerkServer_DeleteNote(t *testing.T) {
	db := &MockDb{}
	s := &NoteClerkServer{
		db:       db,
	}

	delReq := &ehrpb.DeleteNoteRequest{
		Id:                   0,
	}

	res, err := s.DeleteNote(context.Background(), delReq)
	if err != nil {
		t.Fatalf("Failed to perform delete request.")
	}

	if res.Status.HttpCode != ehrpb.StatusCodes_OK {
		t.Fatalf("Status response should be OK")
	}
}

func TestNoteClerkServer_RetrieveNote(t *testing.T) {
	db := &MockDb{}
	s := &NoteClerkServer{
		db:       db,
	}

	expectedId := int32(1)

	retReq := &ehrpb.RetrieveNoteRequest{
		Id:                   expectedId,
	}

	res, err := s.RetrieveNote(context.Background(), retReq)
	if err != nil {
		t.Fatalf("Failed to perform retrieval request.")
	}

	if res.Status.HttpCode != ehrpb.StatusCodes_OK {
		t.Fatalf("Status response should be OK")
	}

	if res.Note == nil {
		t.Fatalf("No note was retrieved")
	}

	if res.Note.Id != expectedId {
		t.Fatalf("The note Id was %v, but should have been %v", res.Note.Id, expectedId)
	}
}

func TestNoteClerkServer_FindNote(t *testing.T) {
	mockDb := &MockDb{}
	_, err := mockDb.Init()
	if err != nil {
		t.Fatalf("Failed to initialize mock database.")
	}

	firstNote := mockDb.db[0]

	filter := &NoteFindFilter{
		VisitGuid:   firstNote.VisitGuid,
	}

	findReq := &ehrpb.FindNoteRequest{
		VisitGuid:            filter.VisitGuid,
	}

	s := &NoteClerkServer{}
	s.db = mockDb
	res, err := s.FindNote(context.Background(), findReq)
	if err != nil {
		t.Fatalf("Failed to find note.")
	}

	if res.Status.HttpCode != ehrpb.StatusCodes_OK {
		t.Fatalf("Should result with status OK.")
	}

	found := false
	for _, n := range res.Note {
		if n.GetVisitGuid() == filter.VisitGuid {
			found = true
			break
		}
	}
	if !found {
		t.Fatalf("Failed to find a note associted with visit GUID %v", filter.VisitGuid)
	}

}

func TestNoteClerkServer_UpdateNote(t *testing.T) {
	mockDb := &MockDb{}
	_, err := mockDb.Init()
	if err != nil {
		t.Fatalf("Failed to initialize mock database.")
	}

	firstNote := mockDb.db[0]

	retReq := &ehrpb.RetrieveNoteRequest{
		Id:                   firstNote.Id,
	}

	s := &NoteClerkServer{}
	s.db = mockDb
	res, _ := s.RetrieveNote(context.Background(), retReq)

	noteToUpdate := res.Note
	noteToUpdate.Tags = append(noteToUpdate.Tags, "appendedTag")

	updateReq := &ehrpb.UpdateNoteRequest{
		Id: 0,
		Note: noteToUpdate,
	}
	updateRes, updateErr := s.UpdateNote(context.Background(), updateReq)
	if updateErr != nil {
		t.Fatalf("Failed to update note")
	}

	if updateRes.Status.HttpCode != ehrpb.StatusCodes_OK {
		t.Fatalf("Status should return OK.")
	}

}

// Skip??
//func TestNoteClerkServer_Initialize(t *testing.T) {
//	panic("implement me")
//}
